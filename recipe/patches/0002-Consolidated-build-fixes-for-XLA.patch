From 8028653c2074db513d54f605a486f4ed0f80dd76 Mon Sep 17 00:00:00 2001
From: "Uwe L. Korn" <uwe.korn@quantco.com>
Date: Thu, 14 Dec 2023 17:06:15 +0100
Subject: [PATCH 2/4] Consolidated build fixes for XLA

jax vendors xla, but only populates the sources through bazel, so we cannot
patch as usual through conda, but rather need to teach the bazel build file
for xla to apply those patches.

To maintain/rebase these patches, use a checkout of https://github.com/openxla/xla,
and then rebase to the commit of xla being used by jax, which can be found in
https://github.com/jax-ml/jax/blob/jax-v{{ version }}/third_party/xla/revision.bzl
which is also where we're patching in the list of patches to apply to xla.

Co-Authored-By: H. Vetinari <h.vetinari@gmx.com>
---
 third_party/grpc_systemlib.BUILD              |  71 +++
 third_party/xla/0001-Fix-abseil-headers.patch | 101 +++++
 .../xla/0002-Omit-usage-of-StrFormat.patch    |  25 ++
 .../xla/0003-Re-enable-system-abseil.patch    | 411 ++++++++++++++++++
 ...ther-absl-log-is-already-initialized.patch |  58 +++
 third_party/xla/0005-Unbundle-grpc.patch      | 152 +++++++
 ...-coordination_agent_recoverable-flag.patch |  35 ++
 ...al-variant-_access-is-now-header-onl.patch |  29 ++
 ...d-dependency-on-proto_bazel_features.patch |  72 +++
 .../0009-Add-macos_x86_64-to-mkl_deps.patch   |  21 +
 .../xla/0010-Add-systemlib-for-oneDNN.patch   |  35 ++
 third_party/xla/workspace.bzl                 |  14 +-
 12 files changed, 1023 insertions(+), 1 deletion(-)
 create mode 100644 third_party/grpc_systemlib.BUILD
 create mode 100644 third_party/xla/0001-Fix-abseil-headers.patch
 create mode 100644 third_party/xla/0002-Omit-usage-of-StrFormat.patch
 create mode 100644 third_party/xla/0003-Re-enable-system-abseil.patch
 create mode 100644 third_party/xla/0004-Check-whether-absl-log-is-already-initialized.patch
 create mode 100644 third_party/xla/0005-Unbundle-grpc.patch
 create mode 100644 third_party/xla/0006-Disable-coordination_agent_recoverable-flag.patch
 create mode 100644 third_party/xla/0007-absl_bad_-optional-variant-_access-is-now-header-onl.patch
 create mode 100644 third_party/xla/0008-Add-dependency-on-proto_bazel_features.patch
 create mode 100644 third_party/xla/0009-Add-macos_x86_64-to-mkl_deps.patch
 create mode 100644 third_party/xla/0010-Add-systemlib-for-oneDNN.patch

diff --git a/third_party/grpc_systemlib.BUILD b/third_party/grpc_systemlib.BUILD
new file mode 100644
index 000000000..0e4e862ce
--- /dev/null
+++ b/third_party/grpc_systemlib.BUILD
@@ -0,0 +1,71 @@
+licenses(["notice"])  # Apache v2
+
+filegroup(
+    name = "LICENSE",
+    visibility = ["//visibility:public"],
+)
+
+cc_library(
+    name = "grpc",
+    linkopts = [
+        "-lgrpc",
+        "-lgpr",
+    ],
+    visibility = ["//visibility:public"],
+)
+
+cc_library(
+    name = "grpc++",
+    linkopts = [
+        "-lgrpc++",
+        "-lgpr",
+    ],
+    visibility = ["//visibility:public"],
+)
+
+cc_library(
+    name = "grpc++_codegen_proto",
+    visibility = ["//visibility:public"],
+)
+
+cc_library(
+    name = "grpc_unsecure",
+    linkopts = [
+        "-lgrpc_unsecure",
+        "-lgpr",
+    ],
+    visibility = ["//visibility:public"],
+)
+
+cc_library(
+    name = "grpc++_unsecure",
+    linkopts = [
+        "-lgrpc++_unsecure",
+        "-lgpr",
+    ],
+    visibility = ["//visibility:public"],
+)
+
+genrule(
+    name = "ln_grpc_cpp_plugin",
+    outs = ["grpc_cpp_plugin.bin"],
+    cmd = "ln -s $$(which grpc_cpp_plugin) $@",
+)
+
+sh_binary(
+    name = "grpc_cpp_plugin",
+    srcs = ["grpc_cpp_plugin.bin"],
+    visibility = ["//visibility:public"],
+)
+
+genrule(
+    name = "ln_grpc_python_plugin",
+    outs = ["grpc_python_plugin.bin"],
+    cmd = "ln -s $$(which grpc_python_plugin) $@",
+)
+
+sh_binary(
+    name = "grpc_python_plugin",
+    srcs = ["grpc_python_plugin.bin"],
+    visibility = ["//visibility:public"],
+)
diff --git a/third_party/xla/0001-Fix-abseil-headers.patch b/third_party/xla/0001-Fix-abseil-headers.patch
new file mode 100644
index 000000000..05d10bda1
--- /dev/null
+++ b/third_party/xla/0001-Fix-abseil-headers.patch
@@ -0,0 +1,101 @@
+From 2f488a0e71990dcf85b7837c72a3d89dd3f7f394 Mon Sep 17 00:00:00 2001
+From: "Uwe L. Korn" <uwe.korn@quantco.com>
+Date: Thu, 23 May 2024 15:45:52 +0200
+Subject: [PATCH 01/10] Fix abseil headers
+
+---
+ xla/backends/cpu/codegen/ir_compiler.cc               | 2 +-
+ xla/hlo/transforms/simplifiers/algebraic_simplifier.h | 2 +-
+ xla/python/ifrt_proxy/common/BUILD                    | 3 +++
+ xla/tsl/distributed_runtime/rpc/BUILD                 | 1 +
+ xla/tsl/platform/default/BUILD                        | 2 ++
+ xla/tsl/profiler/rpc/client/BUILD                     | 4 ++++
+ 6 files changed, 12 insertions(+), 2 deletions(-)
+
+diff --git a/xla/backends/cpu/codegen/ir_compiler.cc b/xla/backends/cpu/codegen/ir_compiler.cc
+index d53ff46421..ff09084ca2 100644
+--- a/xla/backends/cpu/codegen/ir_compiler.cc
++++ b/xla/backends/cpu/codegen/ir_compiler.cc
+@@ -139,7 +139,7 @@ static std::unique_ptr<HloModuleConfig> ParseXlaBackendExtraOptions(
+ // of the proto should be ignored since they're just the default values.
+ // We could instead return an unordered_map<str, str>, but we already have
+ // helpers that expect a DebugOptions, so this ends up being simpler.
+-static absl_nullable std::unique_ptr<HloModuleConfig> GetXlaBackendExtraOptions(
++static std::unique_ptr<HloModuleConfig> GetXlaBackendExtraOptions(
+     const llvm::Module& llvm_module) {
+   llvm::Metadata* md = llvm_module.getModuleFlag("xla_backend_extra_options");
+   if (md == nullptr) return nullptr;
+diff --git a/xla/hlo/transforms/simplifiers/algebraic_simplifier.h b/xla/hlo/transforms/simplifiers/algebraic_simplifier.h
+index 4d688d39eb..ff3748465c 100644
+--- a/xla/hlo/transforms/simplifiers/algebraic_simplifier.h
++++ b/xla/hlo/transforms/simplifiers/algebraic_simplifier.h
+@@ -830,7 +830,7 @@ class AlgebraicSimplifierVisitor : public DfsHloRewriteVisitor {
+   // slice instruction is replaced).
+   // - For example in slices=([0:X:X]), where X == dimension
+   absl::StatusOr<bool> RemoveRedundantStride(
+-      HloInstruction* absl_nonnull slice);
++      HloInstruction* slice);
+ 
+   // Helper function for HandleReduce. Replaces a reduce with a broadcast of the
+   // init values if the reduce is operating on a zero-element array or the
+diff --git a/xla/python/ifrt_proxy/common/BUILD b/xla/python/ifrt_proxy/common/BUILD
+index b547cea85d..7b2eeaaed2 100644
+--- a/xla/python/ifrt_proxy/common/BUILD
++++ b/xla/python/ifrt_proxy/common/BUILD
+@@ -51,6 +51,9 @@ cc_library(
+         "@com_github_grpc_grpc//:grpc++",
+         "@com_google_absl//absl/log",
+         "@com_google_absl//absl/log:check",
++        "@com_google_absl//absl/status",
++        "@com_google_absl//absl/status:statusor",
++        "@com_google_absl//absl/strings",
+         "@tsl//tsl/platform",
+     ],
+     alwayslink = True,
+diff --git a/xla/tsl/distributed_runtime/rpc/BUILD b/xla/tsl/distributed_runtime/rpc/BUILD
+index 073a198a60..22381e348b 100644
+--- a/xla/tsl/distributed_runtime/rpc/BUILD
++++ b/xla/tsl/distributed_runtime/rpc/BUILD
+@@ -39,6 +39,7 @@ cc_library(
+         "//xla/tsl/platform:status",
+         "//xla/tsl/protobuf:distributed_runtime_payloads_proto_cc",
+         "@com_google_absl//absl/status",
++        "@com_google_absl//absl/status:statusor",
+         "@com_google_absl//absl/strings:cord",
+         "@tsl//tsl/platform:protobuf",
+         "@tsl//tsl/platform:stringpiece",
+diff --git a/xla/tsl/platform/default/BUILD b/xla/tsl/platform/default/BUILD
+index 8b3dbd16f1..d11a07b299 100644
+--- a/xla/tsl/platform/default/BUILD
++++ b/xla/tsl/platform/default/BUILD
+@@ -253,6 +253,8 @@ cc_library(
+     deps = [
+         "//xla/tsl/platform:logging",
+         "@com_google_absl//absl/log:check",
++        "@com_google_absl//absl/status",
++        "@com_google_absl//absl/status:statusor",
+     ] + tsl_grpc_cc_dependencies(),
+ )
+ 
+diff --git a/xla/tsl/profiler/rpc/client/BUILD b/xla/tsl/profiler/rpc/client/BUILD
+index 9cdb58b507..d851304e01 100644
+--- a/xla/tsl/profiler/rpc/client/BUILD
++++ b/xla/tsl/profiler/rpc/client/BUILD
+@@ -102,6 +102,8 @@ cc_library(
+     deps = [
+         ":profiler_client_impl",
+         "//xla/tsl/platform:status",
++        "@com_google_absl//absl/status",
++        "@com_google_absl//absl/status:statusor",
+         "@com_google_absl//absl/strings",
+         "@com_google_absl//absl/time",
+         "@tsl//tsl/profiler/protobuf:profiler_analysis_cc_grpc_proto",
+@@ -130,6 +132,8 @@ cc_library(
+         "//xla/tsl/platform:status",
+         "//xla/tsl/platform:types",
+         "//xla/tsl/protobuf:error_codes_proto_impl_cc",
++        "@com_google_absl//absl/status",
++        "@com_google_absl//absl/status:statusor",
+         "@com_google_absl//absl/memory",
+         "@com_google_absl//absl/strings",
+         "@com_google_absl//absl/time",
diff --git a/third_party/xla/0002-Omit-usage-of-StrFormat.patch b/third_party/xla/0002-Omit-usage-of-StrFormat.patch
new file mode 100644
index 000000000..f2180c379
--- /dev/null
+++ b/third_party/xla/0002-Omit-usage-of-StrFormat.patch
@@ -0,0 +1,25 @@
+From 96165020cdfc10467759e9ad6c82c152735423a0 Mon Sep 17 00:00:00 2001
+From: "Uwe L. Korn" <uwe.korn@quantco.com>
+Date: Thu, 4 Jul 2024 10:36:03 +0200
+Subject: [PATCH 02/10] Omit usage of StrFormat
+
+---
+ xla/stream_executor/gpu/gpu_executor.h | 5 +++++
+ 1 file changed, 5 insertions(+)
+
+diff --git a/xla/stream_executor/gpu/gpu_executor.h b/xla/stream_executor/gpu/gpu_executor.h
+index 31bb0e71b4..8a4a28a1e9 100644
+--- a/xla/stream_executor/gpu/gpu_executor.h
++++ b/xla/stream_executor/gpu/gpu_executor.h
+@@ -17,6 +17,11 @@ limitations under the License.
+ #define XLA_STREAM_EXECUTOR_GPU_GPU_EXECUTOR_H_
+ 
+ #include <cstdint>
++#include <memory>
++#include <optional>
++#include <string>
++#include <sstream>
++#include <unordered_map>
+ #include <utility>
+ #include <variant>
+ #include <vector>
diff --git a/third_party/xla/0003-Re-enable-system-abseil.patch b/third_party/xla/0003-Re-enable-system-abseil.patch
new file mode 100644
index 000000000..7e1eeb5e3
--- /dev/null
+++ b/third_party/xla/0003-Re-enable-system-abseil.patch
@@ -0,0 +1,411 @@
+From b29189e58334ff724e21a5e0fa6446bb4268f5b4 Mon Sep 17 00:00:00 2001
+From: "Uwe L. Korn" <uwe.korn@quantco.com>
+Date: Thu, 4 Jul 2024 15:58:32 +0200
+Subject: [PATCH 03/10] Re-enable system abseil
+
+partially revert https://github.com/openxla/xla/commit/1fc2a846d259d3c896a6177485abcc68d97627a9
+and add missing pieces
+
+Co-Authored-By: H. Vetinari <h.vetinari@gmx.com>
+---
+ third_party/absl/system.absl.base.BUILD       |  24 ++++
+ third_party/absl/system.absl.container.BUILD  |   8 ++
+ third_party/absl/system.absl.crc.BUILD        |  70 +++++++++++
+ third_party/absl/system.absl.flags.BUILD      |   2 +-
+ third_party/absl/system.absl.functional.BUILD |   4 +
+ third_party/absl/system.absl.log.BUILD        | 110 ++++++++++++++++++
+ third_party/absl/system.absl.random.BUILD     |   2 +-
+ third_party/absl/system.absl.strings.BUILD    |  23 +++-
+ third_party/absl/system.absl.utility.BUILD    |   5 +
+ third_party/absl/workspace.bzl                |  30 +++++
+ 10 files changed, 275 insertions(+), 3 deletions(-)
+ create mode 100644 third_party/absl/system.absl.crc.BUILD
+ create mode 100644 third_party/absl/system.absl.log.BUILD
+
+diff --git a/third_party/absl/system.absl.base.BUILD b/third_party/absl/system.absl.base.BUILD
+index d6bf8748de..02602690db 100644
+--- a/third_party/absl/system.absl.base.BUILD
++++ b/third_party/absl/system.absl.base.BUILD
+@@ -20,6 +20,14 @@ cc_library(
+     linkopts = ["-labsl_log_severity"],
+ )
+ 
++cc_library(
++    name = "nullability",
++    deps = [
++        ":core_headers",
++        "//absl/meta:type_traits",
++    ],
++)
++
+ cc_library(
+     name = "raw_logging_internal",
+     linkopts = ["-labsl_raw_logging_internal"],
+@@ -105,3 +113,19 @@ cc_library(
+         "//absl:__subpackages__",
+     ],
+ )
++
++cc_library(
++    name = "prefetch",
++    deps = [
++        ":config",
++        ":core_headers",
++    ],
++)
++
++cc_library(
++    name = "no_destructor",
++    deps = [
++        ":config",
++        ":nullability",
++    ],
++)
+diff --git a/third_party/absl/system.absl.container.BUILD b/third_party/absl/system.absl.container.BUILD
+index 95c1626043..0d1343cee3 100644
+--- a/third_party/absl/system.absl.container.BUILD
++++ b/third_party/absl/system.absl.container.BUILD
+@@ -100,6 +100,14 @@ cc_library(
+     ],
+ )
+ 
++cc_library(
++    name = "hash_container_defaults",
++    deps = [
++        "//absl/base:config",
++        "//absl/hash",
++    ],
++)
++
+ cc_library(
+     name = "hash_function_defaults",
+     deps = [
+diff --git a/third_party/absl/system.absl.crc.BUILD b/third_party/absl/system.absl.crc.BUILD
+new file mode 100644
+index 0000000000..487c36ff45
+--- /dev/null
++++ b/third_party/absl/system.absl.crc.BUILD
+@@ -0,0 +1,70 @@
++load("@rules_cc//cc:defs.bzl", "cc_library")
++
++package(default_visibility = ["//visibility:public"])
++
++cc_library(
++    name = "crc32c",
++    linkopts = [
++        "-labsl_crc32c",
++        "-labsl_crc_cord_state",
++        "-labsl_crc_cpu_detect",
++        "-labsl_crc_internal",
++    ],
++    deps = [
++        ":cpu_detect",
++        ":crc_internal",
++        ":non_temporal_memcpy",
++        "//absl/base:config",
++        "//absl/base:core_headers",
++        "//absl/base:endian",
++        "//absl/base:prefetch",
++        "//absl/strings",
++        "//absl/strings:str_format",
++    ],
++)
++
++cc_library(
++    name = "cpu_detect",
++    visibility = ["//visibility:private"],
++    deps = [
++        "//absl/base",
++        "//absl/base:config",
++    ],
++)
++
++cc_library(
++    name = "crc_internal",
++    visibility = ["//visibility:private"],
++    deps = [
++        ":cpu_detect",
++        "//absl/base:config",
++        "//absl/base:core_headers",
++        "//absl/base:endian",
++        "//absl/base:prefetch",
++        "//absl/base:raw_logging_internal",
++        "//absl/memory",
++        "//absl/numeric:bits",
++    ],
++)
++
++cc_library(
++    name = "non_temporal_memcpy",
++    visibility = [
++        ":__pkg__",
++    ],
++    deps = [
++        ":non_temporal_arm_intrinsics",
++        "//absl/base:config",
++        "//absl/base:core_headers",
++    ],
++)
++
++cc_library(
++    name = "non_temporal_arm_intrinsics",
++    visibility = [
++        ":__pkg__",
++    ],
++    deps = [
++        "//absl/base:config",
++    ],
++)
+diff --git a/third_party/absl/system.absl.flags.BUILD b/third_party/absl/system.absl.flags.BUILD
+index aff653c7e5..5f95b11dec 100644
+--- a/third_party/absl/system.absl.flags.BUILD
++++ b/third_party/absl/system.absl.flags.BUILD
+@@ -97,7 +97,7 @@ cc_library(
+ 
+ cc_library(
+     name = "flag",
+-    linkopts = ["-labsl_flags"],
++    linkopts = ["-labsl_flags_usage"],
+     deps = [
+         ":config",
+         ":flag_internal",
+diff --git a/third_party/absl/system.absl.functional.BUILD b/third_party/absl/system.absl.functional.BUILD
+index 9439bd0ba2..70ef675f73 100644
+--- a/third_party/absl/system.absl.functional.BUILD
++++ b/third_party/absl/system.absl.functional.BUILD
+@@ -13,3 +13,7 @@ cc_library(
+ cc_library(
+     name = "function_ref",
+ )
++
++cc_library(
++    name = "overload",
++)
+diff --git a/third_party/absl/system.absl.log.BUILD b/third_party/absl/system.absl.log.BUILD
+new file mode 100644
+index 0000000000..fddded97a4
+--- /dev/null
++++ b/third_party/absl/system.absl.log.BUILD
+@@ -0,0 +1,110 @@
++load("@rules_cc//cc:defs.bzl", "cc_library")
++
++package(default_visibility = ["//visibility:public"])
++
++cc_library(
++    name = "die_if_null",
++    linkopts = ["-labsl_die_if_null"],
++    deps = [
++        ":log",
++        "//absl/base:config",
++        "//absl/base:core_headers",
++        "//absl/strings",
++    ],
++)
++
++cc_library(
++    name = "log",
++    linkopts = [
++        "-labsl_vlog_config_internal",
++        "-labsl_log_internal_conditions",
++        "-labsl_log_internal_check_op",
++        "-labsl_log_internal_message",
++        "-labsl_log_internal_nullguard",
++        "-labsl_synchronization",
++        "-labsl_kernel_timeout_internal",
++        "-labsl_cordz_info",
++        "-labsl_cordz_functions",
++        "-labsl_log_internal_globals"
++    ],
++)
++
++cc_library(
++    name = "absl_log",
++    deps = [
++        ":log",
++    ]
++)
++
++cc_library(
++    name = "check",
++    linkopts = [
++        "-labsl_vlog_config_internal",
++        "-labsl_log_internal_check_op",
++        "-labsl_log_internal_message",
++        "-labsl_log_internal_nullguard",
++    ],
++)
++
++cc_library(
++    name = "globals",
++    linkopts = [
++        "-labsl_log_globals",
++        "-labsl_log_severity",
++        "-labsl_raw_logging_internal",
++        "-labsl_vlog_config_internal",
++    ],
++    deps = [
++        ":log",
++        "//absl/base:config",
++        "//absl/base:core_headers",
++        "//absl/hash",
++        "//absl/strings",
++    ],
++)
++
++cc_library(
++    name = "initialize",
++    linkopts = [
++        "-labsl_log_initialize",
++    ],
++)
++
++cc_library(
++    name = "log_sink",
++    linkopts = [
++        "-labsl_log_sink",
++        "-labsl_log_internal_log_sink_set",
++    ],
++)
++
++cc_library(
++    name = "log_sink_registry",
++    deps = [
++       ":log_sink",
++    ],
++)
++
++cc_library(
++    name = "log_entry",
++    linkopts = [
++        "-labsl_log_internal_log_sink_set",
++    ],
++)
++
++cc_library(
++    name = "absl_check",
++    linkopts = [
++        "-labsl_vlog_config_internal",
++        "-labsl_log_internal_check_op",
++        "-labsl_log_internal_message",
++        "-labsl_log_internal_nullguard",
++    ],
++)
++
++cc_library(
++    name = "vlog_is_on",
++    linkopts = [
++        "-labsl_vlog_config_internal",
++    ],
++)
+diff --git a/third_party/absl/system.absl.random.BUILD b/third_party/absl/system.absl.random.BUILD
+index ac17ce6343..84550a38a9 100644
+--- a/third_party/absl/system.absl.random.BUILD
++++ b/third_party/absl/system.absl.random.BUILD
+@@ -29,8 +29,8 @@ cc_library(
+ cc_library(
+     name = "seed_sequences",
+     linkopts = [
++        "-labsl_random_internal_entropy_pool",
+         "-labsl_random_internal_platform",
+-        "-labsl_random_internal_pool_urbg",
+         "-labsl_random_internal_randen",
+         "-labsl_random_internal_randen_hwaes",
+         "-labsl_random_internal_randen_hwaes_impl",
+diff --git a/third_party/absl/system.absl.strings.BUILD b/third_party/absl/system.absl.strings.BUILD
+index fa9a7a84f6..55b15f9a4f 100644
+--- a/third_party/absl/system.absl.strings.BUILD
++++ b/third_party/absl/system.absl.strings.BUILD
+@@ -2,6 +2,27 @@ load("@rules_cc//cc:defs.bzl", "cc_library")
+ 
+ package(default_visibility = ["//visibility:public"])
+ 
++cc_library(
++    name = "string_view",
++    linkopts = ["-labsl_string_view"],
++    deps = [
++        "//absl/base",
++        "//absl/base:config",
++        "//absl/base:core_headers",
++        "//absl/base:nullability",
++        "//absl/base:throw_delegate",
++    ],
++)
++
++cc_library(
++    name = "charset",
++    deps = [
++        ":string_view",
++        "//absl/base",
++        "//absl/base:config",
++    ],
++)
++
+ cc_library(
+     name = "strings",
+     linkopts = ["-labsl_strings"],
+@@ -26,7 +47,7 @@ cc_library(
+ 
+ cc_library(
+     name = "cord",
+-    linkopts = ["-labsl_cord"],
++    linkopts = ["-labsl_cord", "-labsl_cord_internal"],
+     deps = [
+         ":str_format",
+         "//absl/container:compressed_tuple",
+diff --git a/third_party/absl/system.absl.utility.BUILD b/third_party/absl/system.absl.utility.BUILD
+index e15049e261..013f44289e 100644
+--- a/third_party/absl/system.absl.utility.BUILD
++++ b/third_party/absl/system.absl.utility.BUILD
+@@ -4,3 +4,8 @@ cc_library(
+     name = "utility",
+     visibility = ["//visibility:public"],
+ )
++
++cc_library(
++    name = "if_constexpr",
++    visibility = ["//visibility:public"],
++)
+diff --git a/third_party/absl/workspace.bzl b/third_party/absl/workspace.bzl
+index 3538e8b3f1..5707abf373 100644
+--- a/third_party/absl/workspace.bzl
++++ b/third_party/absl/workspace.bzl
+@@ -11,9 +11,39 @@ def repo():
+     ABSL_SHA256 = "f56086f4cdb0ab9b7c3ac46831b1faba3753248d0f06f8bca4c917a1de2a560a"
+     # LINT.ThenChange(//tensorflow/lite/tools/cmake/modules/abseil-cpp.cmake)
+ 
++    SYS_DIRS = [
++        "algorithm",
++        "base",
++        "crc",
++        "cleanup",
++        "container",
++        "debugging",
++        "flags",
++        "functional",
++        "hash",
++        "log",
++        "memory",
++        "meta",
++        "numeric",
++        "random",
++        "status",
++        "strings",
++        "synchronization",
++        "time",
++        "types",
++        "utility",
++    ]
++    SYS_LINKS = {
++        "//third_party/absl:system.absl.{name}.BUILD".format(name = n): "absl/{name}/BUILD.bazel".format(name = n)
++        for n in SYS_DIRS
++    }
++
+     tf_http_archive(
+         name = "com_google_absl",
+         sha256 = ABSL_SHA256,
++        build_file = "//third_party/absl:com_google_absl.BUILD",
++        system_build_file = "//third_party/absl:system.BUILD",
++        system_link_files = SYS_LINKS,
+         strip_prefix = "abseil-cpp-{commit}".format(commit = ABSL_COMMIT),
+         urls = tf_mirror_urls("https://github.com/abseil/abseil-cpp/archive/{commit}.tar.gz".format(commit = ABSL_COMMIT)),
+         patch_file = [
diff --git a/third_party/xla/0004-Check-whether-absl-log-is-already-initialized.patch b/third_party/xla/0004-Check-whether-absl-log-is-already-initialized.patch
new file mode 100644
index 000000000..0d2c9782e
--- /dev/null
+++ b/third_party/xla/0004-Check-whether-absl-log-is-already-initialized.patch
@@ -0,0 +1,58 @@
+From 5d42f4ddfd56baf0162639ffe54c8ae08c1fea06 Mon Sep 17 00:00:00 2001
+From: "Uwe L. Korn" <uwe.korn@quantco.com>
+Date: Fri, 22 Nov 2024 10:51:18 +0100
+Subject: [PATCH 04/10] Check whether absl log is already initialized
+
+---
+ xla/pjrt/c/pjrt_c_api_gpu.cc | 7 ++++++-
+ xla/python/logging.cc        | 7 ++++++-
+ 2 files changed, 12 insertions(+), 2 deletions(-)
+
+diff --git a/xla/pjrt/c/pjrt_c_api_gpu.cc b/xla/pjrt/c/pjrt_c_api_gpu.cc
+index fe836332be..895f40524d 100644
+--- a/xla/pjrt/c/pjrt_c_api_gpu.cc
++++ b/xla/pjrt/c/pjrt_c_api_gpu.cc
+@@ -17,6 +17,7 @@ limitations under the License.
+ 
+ #include "absl/base/call_once.h"
+ #include "absl/log/initialize.h"
++#include "absl/log/internal/globals.h"
+ #include "xla/pjrt/c/pjrt_c_api.h"
+ #include "xla/pjrt/c/pjrt_c_api_gpu_internal.h"
+ #include "tsl/platform/platform.h"
+@@ -25,7 +26,11 @@ const PJRT_Api* GetPjrtApi() {
+   // Initialize ABSL logging because code within XLA uses it.
+ #ifndef PLATFORM_GOOGLE
+   static absl::once_flag once;
+-  absl::call_once(once, []() { absl::InitializeLog(); });
++  absl::call_once(once, []() {
++    if (!absl::log_internal::IsInitialized()) {
++      absl::InitializeLog();
++    }
++  });
+ #endif  // PLATFORM_GOOGLE
+   return pjrt::gpu_plugin::GetGpuPjrtApi();
+ }
+diff --git a/xla/python/logging.cc b/xla/python/logging.cc
+index 2d8261f025..5222fa96c6 100644
+--- a/xla/python/logging.cc
++++ b/xla/python/logging.cc
+@@ -16,12 +16,17 @@ limitations under the License.
+ #include "xla/python/logging.h"
+ 
+ #include "absl/log/initialize.h"
++#include "absl/log/internal/globals.h"
+ 
+ namespace xla {
+ 
+ // TODO(phawkins): We can't import absl logging in the same file as TSL logging
+ // because of conflicting definitions. We should fix this by using ABSL logging
+ // everywhere.
+-void InitializeAbslLogging() { absl::InitializeLog(); }
++void InitializeAbslLogging() {
++  if (!absl::log_internal::IsInitialized()) {
++    absl::InitializeLog();
++  }
++}
+ 
+ }  // namespace xla
diff --git a/third_party/xla/0005-Unbundle-grpc.patch b/third_party/xla/0005-Unbundle-grpc.patch
new file mode 100644
index 000000000..c77e8a012
--- /dev/null
+++ b/third_party/xla/0005-Unbundle-grpc.patch
@@ -0,0 +1,152 @@
+From e2b3b689d8d722d5750a2f53cabb09a96cdd2a18 Mon Sep 17 00:00:00 2001
+From: "Uwe L. Korn" <uwe.korn@quantco.com>
+Date: Wed, 23 Jul 2025 13:19:52 +0200
+Subject: [PATCH 05/10] Unbundle grpc
+
+---
+ third_party/zlib.BUILD | 37 +------------------------------------
+ workspace0.bzl         |  5 +----
+ workspace1.bzl         |  3 ---
+ workspace2.bzl         | 24 +++++++++++++++++++-----
+ 4 files changed, 21 insertions(+), 48 deletions(-)
+
+diff --git a/third_party/zlib.BUILD b/third_party/zlib.BUILD
+index b8464cf2db..99cf443f8a 100644
+--- a/third_party/zlib.BUILD
++++ b/third_party/zlib.BUILD
+@@ -4,40 +4,5 @@ licenses(["notice"])  # BSD/MIT-like license (for zlib)
+ 
+ cc_library(
+     name = "zlib",
+-    srcs = [
+-        "adler32.c",
+-        "compress.c",
+-        "crc32.c",
+-        "crc32.h",
+-        "deflate.c",
+-        "deflate.h",
+-        "gzclose.c",
+-        "gzguts.h",
+-        "gzlib.c",
+-        "gzread.c",
+-        "gzwrite.c",
+-        "infback.c",
+-        "inffast.c",
+-        "inffast.h",
+-        "inffixed.h",
+-        "inflate.c",
+-        "inflate.h",
+-        "inftrees.c",
+-        "inftrees.h",
+-        "trees.c",
+-        "trees.h",
+-        "uncompr.c",
+-        "zconf.h",
+-        "zutil.c",
+-        "zutil.h",
+-    ],
+-    hdrs = ["zlib.h"],
+-    copts = select({
+-        "@xla//xla/tsl:windows": [],
+-        "//conditions:default": [
+-            "-Wno-shift-negative-value",
+-            "-DZ_HAVE_UNISTD_H",
+-        ],
+-    }),
+-    includes = ["."],
++    linkopts = ["-lz"],
+ )
+diff --git a/workspace0.bzl b/workspace0.bzl
+index 473981911f..657030a44a 100644
+--- a/workspace0.bzl
++++ b/workspace0.bzl
+@@ -5,7 +5,6 @@ load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
+ load("@build_bazel_apple_support//lib:repositories.bzl", "apple_support_dependencies")
+ load("@build_bazel_rules_apple//apple:repositories.bzl", "apple_rules_dependencies")
+ load("@build_bazel_rules_swift//swift:repositories.bzl", "swift_rules_dependencies")
+-load("@com_github_grpc_grpc//bazel:grpc_extra_deps.bzl", "grpc_extra_deps")
+ load("@com_google_benchmark//:bazel/benchmark_deps.bzl", "benchmark_deps")
+ 
+ def _tf_bind():
+@@ -20,7 +19,7 @@ def _tf_bind():
+     # Needed by Protobuf
+     native.bind(
+         name = "grpc_cpp_plugin",
+-        actual = "@com_github_grpc_grpc//src/compiler:grpc_cpp_plugin",
++        actual = "@com_github_grpc_grpc//:grpc_cpp_plugin",
+     )
+     native.bind(
+         name = "grpc_python_plugin",
+@@ -151,8 +150,6 @@ def workspace():
+     # at the end of the WORKSPACE file.
+     _tf_bind()
+ 
+-    grpc_extra_deps()
+-
+ # Alias so it can be loaded without assigning to a different symbol to prevent
+ # shadowing previous loads and trigger a buildifier warning.
+ xla_workspace0 = workspace
+diff --git a/workspace1.bzl b/workspace1.bzl
+index 05121708fc..efb2042936 100644
+--- a/workspace1.bzl
++++ b/workspace1.bzl
+@@ -1,7 +1,6 @@
+ """TensorFlow workspace initialization. Consult the WORKSPACE on how to use it."""
+ 
+ load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
+-load("@com_github_grpc_grpc//bazel:grpc_deps.bzl", "grpc_deps")
+ load("@io_bazel_rules_closure//closure:defs.bzl", "closure_repositories")
+ load("@rules_pkg//:deps.bzl", "rules_pkg_dependencies")
+ load("//third_party/llvm:setup.bzl", "llvm_setup")
+@@ -25,8 +24,6 @@ def workspace():
+         ],
+     )
+ 
+-    grpc_deps()
+-
+ # Alias so it can be loaded without assigning to a different symbol to prevent
+ # shadowing previous loads and trigger a buildifier warning.
+ xla_workspace1 = workspace
+diff --git a/workspace2.bzl b/workspace2.bzl
+index bc1d6aa2cb..b2c5dda804 100644
+--- a/workspace2.bzl
++++ b/workspace2.bzl
+@@ -146,6 +146,23 @@ def _tf_toolchains():
+         aarch64_repo = "../aarch64_linux_toolchain",
+         armhf_repo = "../armhf_linux_toolchain",
+     )
++    
++def _grpc_impl(ctx):
++  path = ctx.os.environ["GRPC_BAZEL_DIR"]
++  ctx.execute(["cp", "-r", path, "."])
++
++  syslib_label = ctx.attr.systemlib
++  syslib_path = ctx.path(syslib_label)
++  ctx.execute(["cp", syslib_path, "BUILD"])
++  ctx.report_progress("Copied systemlib.BUILD")
++
++grpc_bazel_repo = repository_rule(
++    implementation = _grpc_impl,
++    environ        = ["GRPC_BAZEL_DIR"],
++    attrs = {
++        "systemlib": attr.label(mandatory=True),
++    },
++)
+ 
+ # Define all external repositories required by TensorFlow
+ def _tf_repositories():
+@@ -349,12 +366,9 @@ def _tf_repositories():
+         urls = tf_mirror_urls("https://curl.se/download/curl-8.11.0.tar.gz"),
+     )
+ 
+-    tf_http_archive(
++    grpc_bazel_repo(
+         name = "com_github_grpc_grpc",
+-        sha256 = "dd6a2fa311ba8441bbefd2764c55b99136ff10f7ea42954be96006a2723d33fc",
+-        strip_prefix = "grpc-1.74.0",
+-        patch_file = ["//third_party/grpc:grpc.patch"],
+-        urls = tf_mirror_urls("https://github.com/grpc/grpc/archive/refs/tags/v1.74.0.tar.gz"),
++        systemlib = "//third_party:grpc_systemlib.BUILD",
+     )
+ 
+     # Load the raw llvm-project.  llvm does not have build rules set up by default,
diff --git a/third_party/xla/0006-Disable-coordination_agent_recoverable-flag.patch b/third_party/xla/0006-Disable-coordination_agent_recoverable-flag.patch
new file mode 100644
index 000000000..86a7748be
--- /dev/null
+++ b/third_party/xla/0006-Disable-coordination_agent_recoverable-flag.patch
@@ -0,0 +1,35 @@
+From f8cf64f6056602ac1d221cefaab76b585c4e5c6a Mon Sep 17 00:00:00 2001
+From: "Uwe L. Korn" <uwe.korn@quantco.com>
+Date: Thu, 11 Sep 2025 21:30:50 +0200
+Subject: [PATCH 06/10] Disable coordination_agent_recoverable flag
+
+---
+ .../coordination/coordination_service_agent.cc            | 8 ++++----
+ 1 file changed, 4 insertions(+), 4 deletions(-)
+
+diff --git a/xla/tsl/distributed_runtime/coordination/coordination_service_agent.cc b/xla/tsl/distributed_runtime/coordination/coordination_service_agent.cc
+index 22cdbacf14..5639da64d1 100644
+--- a/xla/tsl/distributed_runtime/coordination/coordination_service_agent.cc
++++ b/xla/tsl/distributed_runtime/coordination/coordination_service_agent.cc
+@@ -57,9 +57,9 @@ limitations under the License.
+ #include "xla/tsl/protobuf/coordination_service.pb.h"
+ 
+ // TODO(b/342448688): Expose via config and API instead of flag.
+-ABSL_FLAG(
+-    bool, coordination_agent_recoverable, false,
+-    "If true, allow it to silently reconnect to the service after a restart.");
++// ABSL_FLAG(
++//     bool, coordination_agent_recoverable, false,
++//     "If true, allow it to silently reconnect to the service after a restart.");
+ 
+ namespace tsl {
+ using tensorflow::CoordinatedTask;
+@@ -100,7 +100,7 @@ absl::Status CoordinationServiceAgent::Initialize(
+   CoordinatedTask task;
+   task.set_job_name(std::string(job_name));
+   task.set_task_id(task_id);
+-  if (recoverable || absl::GetFlag(FLAGS_coordination_agent_recoverable)) {
++  if (recoverable) {
+     LOG(WARNING)
+         << "Using experimental recoverable task feature. The default shutdown "
+            "barrier will only block non-recoverable tasks. If a synchronized "
diff --git a/third_party/xla/0007-absl_bad_-optional-variant-_access-is-now-header-onl.patch b/third_party/xla/0007-absl_bad_-optional-variant-_access-is-now-header-onl.patch
new file mode 100644
index 000000000..09b22a1be
--- /dev/null
+++ b/third_party/xla/0007-absl_bad_-optional-variant-_access-is-now-header-onl.patch
@@ -0,0 +1,29 @@
+From d5b2f100a8cde1813c8d90714b465774aa92e873 Mon Sep 17 00:00:00 2001
+From: "Uwe L. Korn" <uwe.korn@quantco.com>
+Date: Thu, 11 Sep 2025 21:33:07 +0200
+Subject: [PATCH 07/10] absl_bad_{optional,variant}_access is now header-only
+
+---
+ third_party/absl/system.absl.types.BUILD | 2 --
+ 1 file changed, 2 deletions(-)
+
+diff --git a/third_party/absl/system.absl.types.BUILD b/third_party/absl/system.absl.types.BUILD
+index db94fc9918..623c0e9612 100644
+--- a/third_party/absl/system.absl.types.BUILD
++++ b/third_party/absl/system.absl.types.BUILD
+@@ -30,7 +30,6 @@ cc_library(
+ 
+ cc_library(
+     name = "bad_optional_access",
+-    linkopts = ["-labsl_bad_optional_access"],
+     deps = [
+         "//absl/base:raw_logging_internal",
+     ],
+@@ -38,7 +37,6 @@ cc_library(
+ 
+ cc_library(
+     name = "bad_variant_access",
+-    linkopts = ["-labsl_bad_variant_access"],
+     deps = [
+         "//absl/base:raw_logging_internal",
+     ],
diff --git a/third_party/xla/0008-Add-dependency-on-proto_bazel_features.patch b/third_party/xla/0008-Add-dependency-on-proto_bazel_features.patch
new file mode 100644
index 000000000..a389be4ed
--- /dev/null
+++ b/third_party/xla/0008-Add-dependency-on-proto_bazel_features.patch
@@ -0,0 +1,72 @@
+From 11d99f37593033bfce14fd3336af3b4b853e9a40 Mon Sep 17 00:00:00 2001
+From: "Uwe L. Korn" <uwe.korn@quantco.com>
+Date: Fri, 12 Sep 2025 16:06:30 +0200
+Subject: [PATCH 08/10] Add dependency on proto_bazel_features
+
+---
+ workspace2.bzl |  4 +++-
+ workspace3.bzl | 17 ++++++++++++++++-
+ 2 files changed, 19 insertions(+), 2 deletions(-)
+
+diff --git a/workspace2.bzl b/workspace2.bzl
+index b2c5dda804..950e21cad7 100644
+--- a/workspace2.bzl
++++ b/workspace2.bzl
+@@ -1,6 +1,7 @@
+ """TensorFlow workspace initialization. Consult the WORKSPACE on how to use it."""
+ 
+ load("@bazel_features//:deps.bzl", "bazel_features_deps")
++load("@proto_bazel_features//:deps.bzl", proto_bazel_features_deps = "bazel_features_deps")
+ load("@bazel_skylib//lib:versions.bzl", "versions")
+ load("@bazel_tools//tools/build_defs/repo:java.bzl", "java_import_external")
+ load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")
+@@ -688,7 +689,8 @@ def workspace():
+     # written according to common practice to query native.existing_rule()).
+     _tf_repositories()
+ 
+-    bazel_features_deps()
++    # bazel_features_deps()
++    proto_bazel_features_deps()
+ 
+ # Alias so it can be loaded without assigning to a different symbol to prevent
+ # shadowing previous loads and trigger a buildifier warning.
+diff --git a/workspace3.bzl b/workspace3.bzl
+index feee699160..3167c567ff 100644
+--- a/workspace3.bzl
++++ b/workspace3.bzl
+@@ -25,6 +25,14 @@ def workspace():
+         ],
+     )
+ 
++    http_archive(
++        name = "rules_java",
++        urls = [
++            "https://github.com/bazelbuild/rules_java/releases/download/7.12.5/rules_java-7.12.5.tar.gz",
++        ],
++        sha256 = "17b18cb4f92ab7b94aa343ce78531b73960b1bed2ba166e5b02c9fdf0b0ac270",
++    )
++
+     http_archive(
+         name = "rules_license",
+         urls = [
+@@ -44,12 +52,19 @@ def workspace():
+     )
+ 
+     http_archive(
+-        name = "bazel_features",
++        name = "proto_bazel_features",
+         sha256 = "4fd9922d464686820ffd8fcefa28ccffa147f7cdc6b6ac0d8b07fde565c65d66",
+         strip_prefix = "bazel_features-1.25.0",
+         url = "https://github.com/bazel-contrib/bazel_features/releases/download/v1.25.0/bazel_features-v1.25.0.tar.gz",
+     )
+ 
++    http_archive(
++        name = "bazel_features",
++        sha256 = "c41853e3b636c533b86bf5ab4658064e6cc9db0a3bce52cbff0629e094344ca9",
++        strip_prefix = "bazel_features-1.33.0",
++        url = "https://github.com/bazel-contrib/bazel_features/releases/download/v1.33.0/bazel_features-v1.33.0.tar.gz",
++    )
++
+     # Maven dependencies.
+     RULES_JVM_EXTERNAL_TAG = "4.3"
+     http_archive(
diff --git a/third_party/xla/0009-Add-macos_x86_64-to-mkl_deps.patch b/third_party/xla/0009-Add-macos_x86_64-to-mkl_deps.patch
new file mode 100644
index 000000000..7a6052118
--- /dev/null
+++ b/third_party/xla/0009-Add-macos_x86_64-to-mkl_deps.patch
@@ -0,0 +1,21 @@
+From bae66c93b3a45d1fe34404aa462f99c5147db16c Mon Sep 17 00:00:00 2001
+From: "Uwe L. Korn" <uwe.korn@quantco.com>
+Date: Sat, 20 Sep 2025 08:15:14 +0200
+Subject: [PATCH 09/10] Add macos_x86_64 to mkl_deps
+
+---
+ xla/tsl/mkl/build_defs.bzl | 1 +
+ 1 file changed, 1 insertion(+)
+
+diff --git a/xla/tsl/mkl/build_defs.bzl b/xla/tsl/mkl/build_defs.bzl
+index d8bf659cd1..ba976572c1 100644
+--- a/xla/tsl/mkl/build_defs.bzl
++++ b/xla/tsl/mkl/build_defs.bzl
+@@ -111,6 +111,7 @@ def mkl_deps():
+         "@xla//xla/tsl/mkl:build_with_mkl_aarch64": ["@mkl_dnn_acl_compatible//:mkl_dnn_acl"],
+         "@xla//xla/tsl:linux_x86_64_with_onednn_async": ["@onednn_async//:mkl_dnn"],
+         "@xla//xla/tsl:linux_x86_64": ["@onednn//:mkl_dnn"],
++        "@xla//xla/tsl:macos_x86_64": ["@onednn//:mkl_dnn"],
+         "@xla//xla/tsl:windows": ["@onednn//:mkl_dnn"],
+         "//conditions:default": [],
+     })
diff --git a/third_party/xla/0010-Add-systemlib-for-oneDNN.patch b/third_party/xla/0010-Add-systemlib-for-oneDNN.patch
new file mode 100644
index 000000000..012a458ad
--- /dev/null
+++ b/third_party/xla/0010-Add-systemlib-for-oneDNN.patch
@@ -0,0 +1,35 @@
+From 0c2cf1a2fd4bf07d4411b703818f220f975a78b1 Mon Sep 17 00:00:00 2001
+From: "Uwe L. Korn" <uwe.korn@quantco.com>
+Date: Fri, 26 Sep 2025 17:23:37 +0200
+Subject: [PATCH 10/10] Add systemlib for oneDNN
+
+---
+ third_party/mkl_dnn/mkldnn_system.BUILD | 6 ++++++
+ workspace2.bzl                          | 1 +
+ 2 files changed, 7 insertions(+)
+ create mode 100644 third_party/mkl_dnn/mkldnn_system.BUILD
+
+diff --git a/third_party/mkl_dnn/mkldnn_system.BUILD b/third_party/mkl_dnn/mkldnn_system.BUILD
+new file mode 100644
+index 0000000000..21787db25a
+--- /dev/null
++++ b/third_party/mkl_dnn/mkldnn_system.BUILD
+@@ -0,0 +1,6 @@
++cc_library(
++    name = "mkl_dnn",
++    linkopts = ["-ldnnl"],
++    visibility = ["//visibility:public"],
++)
++
+diff --git a/workspace2.bzl b/workspace2.bzl
+index 950e21cad7..5b5a46112b 100644
+--- a/workspace2.bzl
++++ b/workspace2.bzl
+@@ -186,6 +186,7 @@ def _tf_repositories():
+         name = "onednn_async",
+         build_file = "//third_party/mkl_dnn:mkldnn_v1.BUILD",
+         patch_file = ["//third_party/mkl_dnn:setting_init.patch"],
++        system_build_file = "//third_party/mkl_dnn:mkldnn_system.BUILD",
+         sha256 = "1cfa18fad65b4c3b46ef701a83c64b87411d63e79c8549cdb37f8c1fc10e2398",
+         strip_prefix = "oneDNN-dev-v3.7-thunk-preview",
+         urls = tf_mirror_urls("https://github.com/oneapi-src/oneDNN/archive/refs/heads/dev-v3.7-thunk-preview.tar.gz"),
diff --git a/third_party/xla/workspace.bzl b/third_party/xla/workspace.bzl
index be345f8c6..8695ab300 100644
--- a/third_party/xla/workspace.bzl
+++ b/third_party/xla/workspace.bzl
@@ -26,6 +26,18 @@ def repo():
         # web links (`/archive/`) links so we use the GitHub API endpoint to get the tarball
         # instead.
         urls = tf_mirror_urls("https://api.github.com/repos/openxla/xla/tarball/{commit}".format(commit = XLA_COMMIT)),
+        patch_file = [
+            "//third_party/xla:0001-Fix-abseil-headers.patch",
+            "//third_party/xla:0002-Omit-usage-of-StrFormat.patch",
+            "//third_party/xla:0003-Re-enable-system-abseil.patch",
+            "//third_party/xla:0004-Check-whether-absl-log-is-already-initialized.patch",
+            "//third_party/xla:0005-Unbundle-grpc.patch",
+            "//third_party/xla:0006-Disable-coordination_agent_recoverable-flag.patch",
+            "//third_party/xla:0007-absl_bad_-optional-variant-_access-is-now-header-onl.patch",
+            "//third_party/xla:0008-Add-dependency-on-proto_bazel_features.patch",
+            "//third_party/xla:0009-Add-macos_x86_64-to-mkl_deps.patch",
+            "//third_party/xla:0010-Add-systemlib-for-oneDNN.patch",
+        ],
     )
 
     # For development, one often wants to make changes to the TF repository as well
@@ -39,4 +51,4 @@ def repo():
     # local_repository(
     #    name = "xla",
     #    path = "/path/to/xla",
-    # )
+   # )
