From aa9090e18be64c322dc506d35a22ba7901440a6b Mon Sep 17 00:00:00 2001
From: "Uwe L. Korn" <uwe.korn@quantco.com>
Date: Thu, 14 Dec 2023 17:06:15 +0100
Subject: [PATCH 2/3] Consolidated build fixes for XLA

jax vendors xla, but only populates the sources through bazel, so we cannot
patch as usual through conda, but rather need to teach the bazel build file
for xla to apply those patches.

To maintain/rebase these patches, use a checkout of https://github.com/openxla/xla,
and then rebase to the commit of xla being used by jax, which can be found in
https://github.com/jax-ml/jax/blob/jax-v{{ version }}/third_party/xla/revision.bzl
which is also where we're patching in the list of patches to apply to xla.

Co-Authored-By: H. Vetinari <h.vetinari@gmx.com>
---
 third_party/grpc_systemlib.BUILD              |  71 ++++
 ...pport-third-party-build-of-boringssl.patch |  50 +++
 third_party/xla/0002-Fix-abseil-headers.patch | 101 +++++
 .../xla/0003-Omit-usage-of-StrFormat.patch    |  25 ++
 .../xla/0004-Re-enable-system-abseil.patch    | 352 ++++++++++++++++++
 ...ther-absl-log-is-already-initialized.patch |  58 +++
 third_party/xla/0006-Unbundle-grpc.patch      | 166 +++++++++
 ...al-variant-_access-is-now-header-onl.patch |  29 ++
 third_party/xla/workspace.bzl                 |   9 +
 9 files changed, 861 insertions(+)
 create mode 100644 third_party/grpc_systemlib.BUILD
 create mode 100644 third_party/xla/0001-Support-third-party-build-of-boringssl.patch
 create mode 100644 third_party/xla/0002-Fix-abseil-headers.patch
 create mode 100644 third_party/xla/0003-Omit-usage-of-StrFormat.patch
 create mode 100644 third_party/xla/0004-Re-enable-system-abseil.patch
 create mode 100644 third_party/xla/0005-Check-whether-absl-log-is-already-initialized.patch
 create mode 100644 third_party/xla/0006-Unbundle-grpc.patch
 create mode 100644 third_party/xla/0007-absl_bad_-optional-variant-_access-is-now-header-onl.patch

diff --git a/third_party/grpc_systemlib.BUILD b/third_party/grpc_systemlib.BUILD
new file mode 100644
index 000000000..0e4e862ce
--- /dev/null
+++ b/third_party/grpc_systemlib.BUILD
@@ -0,0 +1,71 @@
+licenses(["notice"])  # Apache v2
+
+filegroup(
+    name = "LICENSE",
+    visibility = ["//visibility:public"],
+)
+
+cc_library(
+    name = "grpc",
+    linkopts = [
+        "-lgrpc",
+        "-lgpr",
+    ],
+    visibility = ["//visibility:public"],
+)
+
+cc_library(
+    name = "grpc++",
+    linkopts = [
+        "-lgrpc++",
+        "-lgpr",
+    ],
+    visibility = ["//visibility:public"],
+)
+
+cc_library(
+    name = "grpc++_codegen_proto",
+    visibility = ["//visibility:public"],
+)
+
+cc_library(
+    name = "grpc_unsecure",
+    linkopts = [
+        "-lgrpc_unsecure",
+        "-lgpr",
+    ],
+    visibility = ["//visibility:public"],
+)
+
+cc_library(
+    name = "grpc++_unsecure",
+    linkopts = [
+        "-lgrpc++_unsecure",
+        "-lgpr",
+    ],
+    visibility = ["//visibility:public"],
+)
+
+genrule(
+    name = "ln_grpc_cpp_plugin",
+    outs = ["grpc_cpp_plugin.bin"],
+    cmd = "ln -s $$(which grpc_cpp_plugin) $@",
+)
+
+sh_binary(
+    name = "grpc_cpp_plugin",
+    srcs = ["grpc_cpp_plugin.bin"],
+    visibility = ["//visibility:public"],
+)
+
+genrule(
+    name = "ln_grpc_python_plugin",
+    outs = ["grpc_python_plugin.bin"],
+    cmd = "ln -s $$(which grpc_python_plugin) $@",
+)
+
+sh_binary(
+    name = "grpc_python_plugin",
+    srcs = ["grpc_python_plugin.bin"],
+    visibility = ["//visibility:public"],
+)
diff --git a/third_party/xla/0001-Support-third-party-build-of-boringssl.patch b/third_party/xla/0001-Support-third-party-build-of-boringssl.patch
new file mode 100644
index 000000000..794670a80
--- /dev/null
+++ b/third_party/xla/0001-Support-third-party-build-of-boringssl.patch
@@ -0,0 +1,50 @@
+From e178bef80e058520b40d8b0c8b57706f4575cbbc Mon Sep 17 00:00:00 2001
+From: "Uwe L. Korn" <uwe.korn@quantco.com>
+Date: Thu, 14 Dec 2023 15:04:51 +0100
+Subject: [PATCH 1/7] Support third-party build of boringssl
+
+---
+ third_party/boringssl.BUILD | 21 +++++++++++++++++++++
+ workspace2.bzl              |  1 +
+ 2 files changed, 22 insertions(+)
+ create mode 100644 third_party/boringssl.BUILD
+
+diff --git a/third_party/boringssl.BUILD b/third_party/boringssl.BUILD
+new file mode 100644
+index 0000000000..bc4c533403
+--- /dev/null
++++ b/third_party/boringssl.BUILD
+@@ -0,0 +1,21 @@
++licenses(["notice"])
++
++filegroup(
++    name = "LICENSE",
++    visibility = ["//visibility:public"],
++)
++
++cc_library(
++    name = "crypto",
++    linkopts = ["-lcrypto"],
++    visibility = ["//visibility:public"],
++)
++
++cc_library(
++    name = "ssl",
++    linkopts = ["-lssl"],
++    visibility = ["//visibility:public"],
++    deps = [
++        ":crypto",
++    ],
++)
+diff --git a/workspace2.bzl b/workspace2.bzl
+index 774548daa5..2776657e7e 100644
+--- a/workspace2.bzl
++++ b/workspace2.bzl
+@@ -457,6 +457,7 @@ def _tf_repositories():
+         name = "boringssl",
+         sha256 = "9dc53f851107eaf87b391136d13b815df97ec8f76dadb487b58b2fc45e624d2c",
+         strip_prefix = "boringssl-c00d7ca810e93780bd0c8ee4eea28f4f2ea4bcdc",
++        system_build_file = "//third_party:boringssl.BUILD",
+         urls = tf_mirror_urls("https://github.com/google/boringssl/archive/c00d7ca810e93780bd0c8ee4eea28f4f2ea4bcdc.tar.gz"),
+     )
+ 
diff --git a/third_party/xla/0002-Fix-abseil-headers.patch b/third_party/xla/0002-Fix-abseil-headers.patch
new file mode 100644
index 000000000..dcbb2cc66
--- /dev/null
+++ b/third_party/xla/0002-Fix-abseil-headers.patch
@@ -0,0 +1,101 @@
+From 0fdb4d792ddedd869d2da8c44f26b60d09e6d178 Mon Sep 17 00:00:00 2001
+From: "Uwe L. Korn" <uwe.korn@quantco.com>
+Date: Thu, 23 May 2024 15:45:52 +0200
+Subject: [PATCH 2/7] Fix abseil headers
+
+---
+ xla/backends/cpu/codegen/ir_compiler.cc               | 2 +-
+ xla/hlo/transforms/simplifiers/algebraic_simplifier.h | 2 +-
+ xla/python/ifrt_proxy/common/BUILD                    | 3 +++
+ xla/tsl/distributed_runtime/rpc/BUILD                 | 1 +
+ xla/tsl/platform/default/BUILD                        | 2 ++
+ xla/tsl/profiler/rpc/client/BUILD                     | 4 ++++
+ 6 files changed, 12 insertions(+), 2 deletions(-)
+
+diff --git a/xla/backends/cpu/codegen/ir_compiler.cc b/xla/backends/cpu/codegen/ir_compiler.cc
+index 662d9ab336..7797325504 100644
+--- a/xla/backends/cpu/codegen/ir_compiler.cc
++++ b/xla/backends/cpu/codegen/ir_compiler.cc
+@@ -133,7 +133,7 @@ static std::unique_ptr<HloModuleConfig> ParseXlaBackendExtraOptions(
+ // of the proto should be ignored since they're just the default values.
+ // We could instead return an unordered_map<str, str>, but we already have
+ // helpers that expect a DebugOptions, so this ends up being simpler.
+-static absl_nullable std::unique_ptr<HloModuleConfig> GetXlaBackendExtraOptions(
++static std::unique_ptr<HloModuleConfig> GetXlaBackendExtraOptions(
+     const llvm::Module& llvm_module) {
+   llvm::Metadata* md = llvm_module.getModuleFlag("xla_backend_extra_options");
+   if (md == nullptr) return nullptr;
+diff --git a/xla/hlo/transforms/simplifiers/algebraic_simplifier.h b/xla/hlo/transforms/simplifiers/algebraic_simplifier.h
+index df3352a5fb..d69447d8a2 100644
+--- a/xla/hlo/transforms/simplifiers/algebraic_simplifier.h
++++ b/xla/hlo/transforms/simplifiers/algebraic_simplifier.h
+@@ -816,7 +816,7 @@ class AlgebraicSimplifierVisitor : public DfsHloRewriteVisitor {
+   // slice instruction is replaced).
+   // - For example in slices=([0:X:X]), where X == dimension
+   absl::StatusOr<bool> RemoveRedundantStride(
+-      HloInstruction* absl_nonnull slice);
++      HloInstruction* slice);
+ 
+   // Helper function for HandleReduce. Replaces a reduce with a broadcast of the
+   // init values if the reduce is operating on a zero-element array or the
+diff --git a/xla/python/ifrt_proxy/common/BUILD b/xla/python/ifrt_proxy/common/BUILD
+index 226666ebc0..fe09f41250 100644
+--- a/xla/python/ifrt_proxy/common/BUILD
++++ b/xla/python/ifrt_proxy/common/BUILD
+@@ -51,6 +51,9 @@ cc_library(
+         "@com_github_grpc_grpc//:grpc++",
+         "@com_google_absl//absl/log",
+         "@com_google_absl//absl/log:check",
++        "@com_google_absl//absl/status",
++        "@com_google_absl//absl/status:statusor",
++        "@com_google_absl//absl/strings",
+         "@tsl//tsl/platform",
+     ],
+     alwayslink = True,
+diff --git a/xla/tsl/distributed_runtime/rpc/BUILD b/xla/tsl/distributed_runtime/rpc/BUILD
+index 073a198a60..22381e348b 100644
+--- a/xla/tsl/distributed_runtime/rpc/BUILD
++++ b/xla/tsl/distributed_runtime/rpc/BUILD
+@@ -39,6 +39,7 @@ cc_library(
+         "//xla/tsl/platform:status",
+         "//xla/tsl/protobuf:distributed_runtime_payloads_proto_cc",
+         "@com_google_absl//absl/status",
++        "@com_google_absl//absl/status:statusor",
+         "@com_google_absl//absl/strings:cord",
+         "@tsl//tsl/platform:protobuf",
+         "@tsl//tsl/platform:stringpiece",
+diff --git a/xla/tsl/platform/default/BUILD b/xla/tsl/platform/default/BUILD
+index ab44f110ee..c2a6a9cc4c 100644
+--- a/xla/tsl/platform/default/BUILD
++++ b/xla/tsl/platform/default/BUILD
+@@ -244,6 +244,8 @@ cc_library(
+     deps = [
+         "//xla/tsl/platform:logging",
+         "@com_google_absl//absl/log:check",
++        "@com_google_absl//absl/status",
++        "@com_google_absl//absl/status:statusor",
+     ] + tsl_grpc_cc_dependencies(),
+ )
+ 
+diff --git a/xla/tsl/profiler/rpc/client/BUILD b/xla/tsl/profiler/rpc/client/BUILD
+index ce37e1624b..b0ea3c03f3 100644
+--- a/xla/tsl/profiler/rpc/client/BUILD
++++ b/xla/tsl/profiler/rpc/client/BUILD
+@@ -102,6 +102,8 @@ cc_library(
+     deps = [
+         ":profiler_client_impl",
+         "//xla/tsl/platform:status",
++        "@com_google_absl//absl/status",
++        "@com_google_absl//absl/status:statusor",
+         "@com_google_absl//absl/strings",
+         "@com_google_absl//absl/time",
+         "@tsl//tsl/profiler/protobuf:profiler_analysis_cc_grpc_proto",
+@@ -130,6 +132,8 @@ cc_library(
+         "//xla/tsl/platform:status",
+         "//xla/tsl/platform:types",
+         "//xla/tsl/protobuf:error_codes_proto_impl_cc",
++        "@com_google_absl//absl/status",
++        "@com_google_absl//absl/status:statusor",
+         "@com_google_absl//absl/memory",
+         "@com_google_absl//absl/strings",
+         "@com_google_absl//absl/time",
diff --git a/third_party/xla/0003-Omit-usage-of-StrFormat.patch b/third_party/xla/0003-Omit-usage-of-StrFormat.patch
new file mode 100644
index 000000000..1e4965597
--- /dev/null
+++ b/third_party/xla/0003-Omit-usage-of-StrFormat.patch
@@ -0,0 +1,25 @@
+From 612dad39370c934e27cfe74ef38190e373d94d5e Mon Sep 17 00:00:00 2001
+From: "Uwe L. Korn" <uwe.korn@quantco.com>
+Date: Thu, 4 Jul 2024 10:36:03 +0200
+Subject: [PATCH 3/7] Omit usage of StrFormat
+
+---
+ xla/stream_executor/gpu/gpu_executor.h | 5 +++++
+ 1 file changed, 5 insertions(+)
+
+diff --git a/xla/stream_executor/gpu/gpu_executor.h b/xla/stream_executor/gpu/gpu_executor.h
+index ad9b10e3aa..a261c3071d 100644
+--- a/xla/stream_executor/gpu/gpu_executor.h
++++ b/xla/stream_executor/gpu/gpu_executor.h
+@@ -17,6 +17,11 @@ limitations under the License.
+ #define XLA_STREAM_EXECUTOR_GPU_GPU_EXECUTOR_H_
+ 
+ #include <cstdint>
++#include <memory>
++#include <optional>
++#include <string>
++#include <sstream>
++#include <unordered_map>
+ #include <utility>
+ #include <variant>
+ #include <vector>
diff --git a/third_party/xla/0004-Re-enable-system-abseil.patch b/third_party/xla/0004-Re-enable-system-abseil.patch
new file mode 100644
index 000000000..ebce429f3
--- /dev/null
+++ b/third_party/xla/0004-Re-enable-system-abseil.patch
@@ -0,0 +1,352 @@
+From bc22315a4e68a7d440ec85dd40a9784a55b1c915 Mon Sep 17 00:00:00 2001
+From: "Uwe L. Korn" <uwe.korn@quantco.com>
+Date: Thu, 4 Jul 2024 15:58:32 +0200
+Subject: [PATCH 4/7] Re-enable system abseil
+
+partially revert https://github.com/openxla/xla/commit/1fc2a846d259d3c896a6177485abcc68d97627a9
+and add missing pieces
+
+Co-Authored-By: H. Vetinari <h.vetinari@gmx.com>
+---
+ third_party/absl/system.absl.base.BUILD       | 24 +++++
+ third_party/absl/system.absl.crc.BUILD        | 70 ++++++++++++++
+ third_party/absl/system.absl.flags.BUILD      |  2 +-
+ third_party/absl/system.absl.functional.BUILD |  4 +
+ third_party/absl/system.absl.log.BUILD        | 95 +++++++++++++++++++
+ third_party/absl/system.absl.strings.BUILD    | 14 ++-
+ third_party/absl/system.absl.utility.BUILD    |  5 +
+ third_party/absl/workspace.bzl                | 30 ++++++
+ 8 files changed, 242 insertions(+), 2 deletions(-)
+ create mode 100644 third_party/absl/system.absl.crc.BUILD
+ create mode 100644 third_party/absl/system.absl.log.BUILD
+
+diff --git a/third_party/absl/system.absl.base.BUILD b/third_party/absl/system.absl.base.BUILD
+index d6bf8748de..02602690db 100644
+--- a/third_party/absl/system.absl.base.BUILD
++++ b/third_party/absl/system.absl.base.BUILD
+@@ -20,6 +20,14 @@ cc_library(
+     linkopts = ["-labsl_log_severity"],
+ )
+ 
++cc_library(
++    name = "nullability",
++    deps = [
++        ":core_headers",
++        "//absl/meta:type_traits",
++    ],
++)
++
+ cc_library(
+     name = "raw_logging_internal",
+     linkopts = ["-labsl_raw_logging_internal"],
+@@ -105,3 +113,19 @@ cc_library(
+         "//absl:__subpackages__",
+     ],
+ )
++
++cc_library(
++    name = "prefetch",
++    deps = [
++        ":config",
++        ":core_headers",
++    ],
++)
++
++cc_library(
++    name = "no_destructor",
++    deps = [
++        ":config",
++        ":nullability",
++    ],
++)
+diff --git a/third_party/absl/system.absl.crc.BUILD b/third_party/absl/system.absl.crc.BUILD
+new file mode 100644
+index 0000000000..487c36ff45
+--- /dev/null
++++ b/third_party/absl/system.absl.crc.BUILD
+@@ -0,0 +1,70 @@
++load("@rules_cc//cc:defs.bzl", "cc_library")
++
++package(default_visibility = ["//visibility:public"])
++
++cc_library(
++    name = "crc32c",
++    linkopts = [
++        "-labsl_crc32c",
++        "-labsl_crc_cord_state",
++        "-labsl_crc_cpu_detect",
++        "-labsl_crc_internal",
++    ],
++    deps = [
++        ":cpu_detect",
++        ":crc_internal",
++        ":non_temporal_memcpy",
++        "//absl/base:config",
++        "//absl/base:core_headers",
++        "//absl/base:endian",
++        "//absl/base:prefetch",
++        "//absl/strings",
++        "//absl/strings:str_format",
++    ],
++)
++
++cc_library(
++    name = "cpu_detect",
++    visibility = ["//visibility:private"],
++    deps = [
++        "//absl/base",
++        "//absl/base:config",
++    ],
++)
++
++cc_library(
++    name = "crc_internal",
++    visibility = ["//visibility:private"],
++    deps = [
++        ":cpu_detect",
++        "//absl/base:config",
++        "//absl/base:core_headers",
++        "//absl/base:endian",
++        "//absl/base:prefetch",
++        "//absl/base:raw_logging_internal",
++        "//absl/memory",
++        "//absl/numeric:bits",
++    ],
++)
++
++cc_library(
++    name = "non_temporal_memcpy",
++    visibility = [
++        ":__pkg__",
++    ],
++    deps = [
++        ":non_temporal_arm_intrinsics",
++        "//absl/base:config",
++        "//absl/base:core_headers",
++    ],
++)
++
++cc_library(
++    name = "non_temporal_arm_intrinsics",
++    visibility = [
++        ":__pkg__",
++    ],
++    deps = [
++        "//absl/base:config",
++    ],
++)
+diff --git a/third_party/absl/system.absl.flags.BUILD b/third_party/absl/system.absl.flags.BUILD
+index aff653c7e5..5f95b11dec 100644
+--- a/third_party/absl/system.absl.flags.BUILD
++++ b/third_party/absl/system.absl.flags.BUILD
+@@ -97,7 +97,7 @@ cc_library(
+ 
+ cc_library(
+     name = "flag",
+-    linkopts = ["-labsl_flags"],
++    linkopts = ["-labsl_flags_usage"],
+     deps = [
+         ":config",
+         ":flag_internal",
+diff --git a/third_party/absl/system.absl.functional.BUILD b/third_party/absl/system.absl.functional.BUILD
+index 9439bd0ba2..70ef675f73 100644
+--- a/third_party/absl/system.absl.functional.BUILD
++++ b/third_party/absl/system.absl.functional.BUILD
+@@ -13,3 +13,7 @@ cc_library(
+ cc_library(
+     name = "function_ref",
+ )
++
++cc_library(
++    name = "overload",
++)
+diff --git a/third_party/absl/system.absl.log.BUILD b/third_party/absl/system.absl.log.BUILD
+new file mode 100644
+index 0000000000..9ddc8c4079
+--- /dev/null
++++ b/third_party/absl/system.absl.log.BUILD
+@@ -0,0 +1,95 @@
++load("@rules_cc//cc:defs.bzl", "cc_library")
++
++package(default_visibility = ["//visibility:public"])
++
++cc_library(
++    name = "die_if_null",
++    linkopts = ["-labsl_die_if_null"],
++    deps = [
++        ":log",
++        "//absl/base:config",
++        "//absl/base:core_headers",
++        "//absl/strings",
++    ],
++)
++
++cc_library(
++    name = "log",
++    linkopts = [
++        "-labsl_vlog_config_internal",
++        "-labsl_log_internal_conditions",
++        "-labsl_log_internal_check_op",
++        "-labsl_log_internal_message",
++        "-labsl_log_internal_nullguard",
++        "-labsl_synchronization",
++        "-labsl_kernel_timeout_internal",
++        "-labsl_cordz_info",
++        "-labsl_cordz_functions",
++        "-labsl_log_internal_globals"
++    ],
++)
++
++cc_library(
++    name = "absl_log",
++    deps = [
++        ":log",
++    ]
++)
++
++cc_library(
++    name = "check",
++    linkopts = [
++        "-labsl_vlog_config_internal",
++        "-labsl_log_internal_check_op",
++        "-labsl_log_internal_message",
++        "-labsl_log_internal_nullguard",
++    ],
++)
++
++cc_library(
++    name = "globals",
++    linkopts = [
++        "-labsl_log_globals",
++        "-labsl_log_severity",
++        "-labsl_raw_logging_internal",
++        "-labsl_vlog_config_internal",
++    ],
++    deps = [
++        ":log",
++        "//absl/base:config",
++        "//absl/base:core_headers",
++        "//absl/hash",
++        "//absl/strings",
++    ],
++)
++
++cc_library(
++    name = "initialize",
++    linkopts = [
++        "-labsl_log_initialize",
++    ],
++)
++
++cc_library(
++    name = "log_sink",
++    linkopts = [
++        "-labsl_log_internal_log_sink_set",
++    ],
++)
++
++cc_library(
++    name = "log_entry",
++    linkopts = [
++        "-labsl_log_internal_log_sink_set",
++    ],
++)
++
++cc_library(
++    name = "absl_check",
++    linkopts = [
++        "-labsl_vlog_config_internal",
++        "-labsl_log_internal_check_op",
++        "-labsl_log_internal_message",
++        "-labsl_log_internal_nullguard",
++    ],
++)
+diff --git a/third_party/absl/system.absl.strings.BUILD b/third_party/absl/system.absl.strings.BUILD
+index fa9a7a84f6..d80b617b86 100644
+--- a/third_party/absl/system.absl.strings.BUILD
++++ b/third_party/absl/system.absl.strings.BUILD
+@@ -2,6 +2,18 @@ load("@rules_cc//cc:defs.bzl", "cc_library")
+ 
+ package(default_visibility = ["//visibility:public"])
+ 
++cc_library(
++    name = "string_view",
++    linkopts = ["-labsl_string_view"],
++    deps = [
++        "//absl/base",
++        "//absl/base:config",
++        "//absl/base:core_headers",
++        "//absl/base:nullability",
++        "//absl/base:throw_delegate",
++    ],
++)
++
+ cc_library(
+     name = "strings",
+     linkopts = ["-labsl_strings"],
+@@ -26,7 +38,7 @@ cc_library(
+ 
+ cc_library(
+     name = "cord",
+-    linkopts = ["-labsl_cord"],
++    linkopts = ["-labsl_cord", "-labsl_cord_internal"],
+     deps = [
+         ":str_format",
+         "//absl/container:compressed_tuple",
+diff --git a/third_party/absl/system.absl.utility.BUILD b/third_party/absl/system.absl.utility.BUILD
+index e15049e261..013f44289e 100644
+--- a/third_party/absl/system.absl.utility.BUILD
++++ b/third_party/absl/system.absl.utility.BUILD
+@@ -4,3 +4,8 @@ cc_library(
+     name = "utility",
+     visibility = ["//visibility:public"],
+ )
++
++cc_library(
++    name = "if_constexpr",
++    visibility = ["//visibility:public"],
++)
+diff --git a/third_party/absl/workspace.bzl b/third_party/absl/workspace.bzl
+index 9144c5bd5b..6243f35123 100644
+--- a/third_party/absl/workspace.bzl
++++ b/third_party/absl/workspace.bzl
+@@ -11,9 +11,39 @@ def repo():
+     ABSL_SHA256 = "c397cd9cca3f71724a8ddf183e7fa71c19196eaafd1dc2a3c86d3a572613a807"
+     # LINT.ThenChange(//tensorflow/lite/tools/cmake/modules/abseil-cpp.cmake)
+ 
++    SYS_DIRS = [
++        "algorithm",
++        "base",
++        "crc",
++        "cleanup",
++        "container",
++        "debugging",
++        "flags",
++        "functional",
++        "hash",
++        "log",
++        "memory",
++        "meta",
++        "numeric",
++        "random",
++        "status",
++        "strings",
++        "synchronization",
++        "time",
++        "types",
++        "utility",
++    ]
++    SYS_LINKS = {
++        "//third_party/absl:system.absl.{name}.BUILD".format(name = n): "absl/{name}/BUILD.bazel".format(name = n)
++        for n in SYS_DIRS
++    }
++
+     tf_http_archive(
+         name = "com_google_absl",
+         sha256 = ABSL_SHA256,
++        build_file = "//third_party/absl:com_google_absl.BUILD",
++        system_build_file = "//third_party/absl:system.BUILD",
++        system_link_files = SYS_LINKS,
+         strip_prefix = "abseil-cpp-{commit}".format(commit = ABSL_COMMIT),
+         urls = tf_mirror_urls("https://github.com/abseil/abseil-cpp/archive/{commit}.tar.gz".format(commit = ABSL_COMMIT)),
+         patch_file = [
diff --git a/third_party/xla/0005-Check-whether-absl-log-is-already-initialized.patch b/third_party/xla/0005-Check-whether-absl-log-is-already-initialized.patch
new file mode 100644
index 000000000..6e480f2dc
--- /dev/null
+++ b/third_party/xla/0005-Check-whether-absl-log-is-already-initialized.patch
@@ -0,0 +1,58 @@
+From de6eafe7db91e6c0ec027762cdd8cbc93af850e9 Mon Sep 17 00:00:00 2001
+From: "Uwe L. Korn" <uwe.korn@quantco.com>
+Date: Fri, 22 Nov 2024 10:51:18 +0100
+Subject: [PATCH 5/7] Check whether absl log is already initialized
+
+---
+ xla/pjrt/c/pjrt_c_api_gpu.cc | 7 ++++++-
+ xla/python/logging.cc        | 7 ++++++-
+ 2 files changed, 12 insertions(+), 2 deletions(-)
+
+diff --git a/xla/pjrt/c/pjrt_c_api_gpu.cc b/xla/pjrt/c/pjrt_c_api_gpu.cc
+index fe836332be..895f40524d 100644
+--- a/xla/pjrt/c/pjrt_c_api_gpu.cc
++++ b/xla/pjrt/c/pjrt_c_api_gpu.cc
+@@ -17,6 +17,7 @@ limitations under the License.
+ 
+ #include "absl/base/call_once.h"
+ #include "absl/log/initialize.h"
++#include "absl/log/internal/globals.h"
+ #include "xla/pjrt/c/pjrt_c_api.h"
+ #include "xla/pjrt/c/pjrt_c_api_gpu_internal.h"
+ #include "tsl/platform/platform.h"
+@@ -25,7 +26,11 @@ const PJRT_Api* GetPjrtApi() {
+   // Initialize ABSL logging because code within XLA uses it.
+ #ifndef PLATFORM_GOOGLE
+   static absl::once_flag once;
+-  absl::call_once(once, []() { absl::InitializeLog(); });
++  absl::call_once(once, []() {
++    if (!absl::log_internal::IsInitialized()) {
++      absl::InitializeLog();
++    }
++  });
+ #endif  // PLATFORM_GOOGLE
+   return pjrt::gpu_plugin::GetGpuPjrtApi();
+ }
+diff --git a/xla/python/logging.cc b/xla/python/logging.cc
+index 2d8261f025..5222fa96c6 100644
+--- a/xla/python/logging.cc
++++ b/xla/python/logging.cc
+@@ -16,12 +16,17 @@ limitations under the License.
+ #include "xla/python/logging.h"
+ 
+ #include "absl/log/initialize.h"
++#include "absl/log/internal/globals.h"
+ 
+ namespace xla {
+ 
+ // TODO(phawkins): We can't import absl logging in the same file as TSL logging
+ // because of conflicting definitions. We should fix this by using ABSL logging
+ // everywhere.
+-void InitializeAbslLogging() { absl::InitializeLog(); }
++void InitializeAbslLogging() {
++  if (!absl::log_internal::IsInitialized()) {
++    absl::InitializeLog();
++  }
++}
+ 
+ }  // namespace xla
diff --git a/third_party/xla/0006-Unbundle-grpc.patch b/third_party/xla/0006-Unbundle-grpc.patch
new file mode 100644
index 000000000..6eedb99a8
--- /dev/null
+++ b/third_party/xla/0006-Unbundle-grpc.patch
@@ -0,0 +1,166 @@
+From 6e637800062debfc74d968c3b6d29fa12a4b429f Mon Sep 17 00:00:00 2001
+From: "Uwe L. Korn" <uwe.korn@quantco.com>
+Date: Wed, 23 Jul 2025 13:19:52 +0200
+Subject: [PATCH 6/7] Unbundle grpc
+
+---
+ third_party/zlib.BUILD | 37 +------------------------------------
+ workspace0.bzl         |  5 +----
+ workspace1.bzl         |  3 ---
+ workspace2.bzl         | 38 +++++++++++++++++++++++++++++++-------
+ 4 files changed, 33 insertions(+), 50 deletions(-)
+
+diff --git a/third_party/zlib.BUILD b/third_party/zlib.BUILD
+index b8464cf2db..99cf443f8a 100644
+--- a/third_party/zlib.BUILD
++++ b/third_party/zlib.BUILD
+@@ -4,40 +4,5 @@ licenses(["notice"])  # BSD/MIT-like license (for zlib)
+ 
+ cc_library(
+     name = "zlib",
+-    srcs = [
+-        "adler32.c",
+-        "compress.c",
+-        "crc32.c",
+-        "crc32.h",
+-        "deflate.c",
+-        "deflate.h",
+-        "gzclose.c",
+-        "gzguts.h",
+-        "gzlib.c",
+-        "gzread.c",
+-        "gzwrite.c",
+-        "infback.c",
+-        "inffast.c",
+-        "inffast.h",
+-        "inffixed.h",
+-        "inflate.c",
+-        "inflate.h",
+-        "inftrees.c",
+-        "inftrees.h",
+-        "trees.c",
+-        "trees.h",
+-        "uncompr.c",
+-        "zconf.h",
+-        "zutil.c",
+-        "zutil.h",
+-    ],
+-    hdrs = ["zlib.h"],
+-    copts = select({
+-        "@xla//xla/tsl:windows": [],
+-        "//conditions:default": [
+-            "-Wno-shift-negative-value",
+-            "-DZ_HAVE_UNISTD_H",
+-        ],
+-    }),
+-    includes = ["."],
++    linkopts = ["-lz"],
+ )
+diff --git a/workspace0.bzl b/workspace0.bzl
+index 25db007e51..1eb3179764 100644
+--- a/workspace0.bzl
++++ b/workspace0.bzl
+@@ -5,7 +5,6 @@ load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
+ load("@build_bazel_apple_support//lib:repositories.bzl", "apple_support_dependencies")
+ load("@build_bazel_rules_apple//apple:repositories.bzl", "apple_rules_dependencies")
+ load("@build_bazel_rules_swift//swift:repositories.bzl", "swift_rules_dependencies")
+-load("@com_github_grpc_grpc//bazel:grpc_extra_deps.bzl", "grpc_extra_deps")
+ load("@com_google_benchmark//:bazel/benchmark_deps.bzl", "benchmark_deps")
+ 
+ def _tf_bind():
+@@ -20,7 +19,7 @@ def _tf_bind():
+     # Needed by Protobuf
+     native.bind(
+         name = "grpc_cpp_plugin",
+-        actual = "@com_github_grpc_grpc//src/compiler:grpc_cpp_plugin",
++        actual = "@com_github_grpc_grpc//:grpc_cpp_plugin",
+     )
+     native.bind(
+         name = "grpc_python_plugin",
+@@ -149,8 +148,6 @@ def workspace():
+     # at the end of the WORKSPACE file.
+     _tf_bind()
+ 
+-    grpc_extra_deps()
+-
+ # Alias so it can be loaded without assigning to a different symbol to prevent
+ # shadowing previous loads and trigger a buildifier warning.
+ xla_workspace0 = workspace
+diff --git a/workspace1.bzl b/workspace1.bzl
+index 05121708fc..efb2042936 100644
+--- a/workspace1.bzl
++++ b/workspace1.bzl
+@@ -1,7 +1,6 @@
+ """TensorFlow workspace initialization. Consult the WORKSPACE on how to use it."""
+ 
+ load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
+-load("@com_github_grpc_grpc//bazel:grpc_deps.bzl", "grpc_deps")
+ load("@io_bazel_rules_closure//closure:defs.bzl", "closure_repositories")
+ load("@rules_pkg//:deps.bzl", "rules_pkg_dependencies")
+ load("//third_party/llvm:setup.bzl", "llvm_setup")
+@@ -25,8 +24,6 @@ def workspace():
+         ],
+     )
+ 
+-    grpc_deps()
+-
+ # Alias so it can be loaded without assigning to a different symbol to prevent
+ # shadowing previous loads and trigger a buildifier warning.
+ xla_workspace1 = workspace
+diff --git a/workspace2.bzl b/workspace2.bzl
+index 2776657e7e..045a8970da 100644
+--- a/workspace2.bzl
++++ b/workspace2.bzl
+@@ -121,6 +121,23 @@ def _tf_toolchains():
+         aarch64_repo = "../aarch64_linux_toolchain",
+         armhf_repo = "../armhf_linux_toolchain",
+     )
++    
++def _grpc_impl(ctx):
++  path = ctx.os.environ["GRPC_BAZEL_DIR"]
++  ctx.execute(["cp", "-r", path, "."])
++
++  syslib_label = ctx.attr.systemlib
++  syslib_path = ctx.path(syslib_label)
++  ctx.execute(["cp", syslib_path, "BUILD"])
++  ctx.report_progress("Copied systemlib.BUILD")
++
++grpc_bazel_repo = repository_rule(
++    implementation = _grpc_impl,
++    environ        = ["GRPC_BAZEL_DIR"],
++    attrs = {
++        "systemlib": attr.label(mandatory=True),
++    },
++)
+ 
+ # Define all external repositories required by TensorFlow
+ def _tf_repositories():
+@@ -364,14 +381,21 @@ def _tf_repositories():
+     )
+ 
+     # WARNING: make sure ncteisen@ and vpai@ are cc-ed on any CL to change the below rule
+-    tf_http_archive(
++    # tf_http_archive(
++    #     name = "com_github_grpc_grpc",
++    #     sha256 = "afbc5d78d6ba6d509cc6e264de0d49dcd7304db435cbf2d630385bacf49e066c",
++    #     strip_prefix = "grpc-1.68.2",
++    #     patch_file = [
++    #         "//third_party/grpc:grpc.patch",
++    #     ],
++    #     system_build_file = "//third_party/grpc:systemlib.BUILD",
++    #     new_local_repository
++    #     urls = tf_mirror_urls("https://github.com/grpc/grpc/archive/refs/tags/v1.68.2.tar.gz"),
++    # )
++
++    grpc_bazel_repo(
+         name = "com_github_grpc_grpc",
+-        sha256 = "afbc5d78d6ba6d509cc6e264de0d49dcd7304db435cbf2d630385bacf49e066c",
+-        strip_prefix = "grpc-1.68.2",
+-        patch_file = [
+-            "//third_party/grpc:grpc.patch",
+-        ],
+-        urls = tf_mirror_urls("https://github.com/grpc/grpc/archive/refs/tags/v1.68.2.tar.gz"),
++        systemlib = "//third_party:grpc_systemlib.BUILD",
+     )
+ 
+     # Load the raw llvm-project.  llvm does not have build rules set up by default,
diff --git a/third_party/xla/0007-absl_bad_-optional-variant-_access-is-now-header-onl.patch b/third_party/xla/0007-absl_bad_-optional-variant-_access-is-now-header-onl.patch
new file mode 100644
index 000000000..e393229b0
--- /dev/null
+++ b/third_party/xla/0007-absl_bad_-optional-variant-_access-is-now-header-onl.patch
@@ -0,0 +1,29 @@
+From 24e4511315949346e3b8f73f3ef6a8a8f37ee49d Mon Sep 17 00:00:00 2001
+From: "H. Vetinari" <h.vetinari@gmx.com>
+Date: Sun, 6 Jul 2025 18:02:21 +1100
+Subject: [PATCH 7/7] absl_bad_{optional,variant}_access is now header-only
+
+---
+ third_party/absl/system.absl.types.BUILD | 2 --
+ 1 file changed, 2 deletions(-)
+
+diff --git a/third_party/absl/system.absl.types.BUILD b/third_party/absl/system.absl.types.BUILD
+index db94fc9918..623c0e9612 100644
+--- a/third_party/absl/system.absl.types.BUILD
++++ b/third_party/absl/system.absl.types.BUILD
+@@ -30,7 +30,6 @@ cc_library(
+ 
+ cc_library(
+     name = "bad_optional_access",
+-    linkopts = ["-labsl_bad_optional_access"],
+     deps = [
+         "//absl/base:raw_logging_internal",
+     ],
+@@ -38,7 +37,6 @@ cc_library(
+ 
+ cc_library(
+     name = "bad_variant_access",
+-    linkopts = ["-labsl_bad_variant_access"],
+     deps = [
+         "//absl/base:raw_logging_internal",
+     ],
diff --git a/third_party/xla/workspace.bzl b/third_party/xla/workspace.bzl
index 286aa167c..5a6f95f65 100644
--- a/third_party/xla/workspace.bzl
+++ b/third_party/xla/workspace.bzl
@@ -22,6 +22,15 @@ def repo():
         sha256 = XLA_SHA256,
         strip_prefix = "xla-{commit}".format(commit = XLA_COMMIT),
         urls = tf_mirror_urls("https://github.com/openxla/xla/archive/{commit}.tar.gz".format(commit = XLA_COMMIT)),
+        patch_file = [
+            "//third_party/xla:0001-Support-third-party-build-of-boringssl.patch",
+            "//third_party/xla:0002-Fix-abseil-headers.patch",
+            "//third_party/xla:0003-Omit-usage-of-StrFormat.patch",
+            "//third_party/xla:0004-Re-enable-system-abseil.patch",
+            "//third_party/xla:0005-Check-whether-absl-log-is-already-initialized.patch",
+            "//third_party/xla:0006-Unbundle-grpc.patch",
+            "//third_party/xla:0007-absl_bad_-optional-variant-_access-is-now-header-onl.patch",
+       ],
     )
 
     # For development, one often wants to make changes to the TF repository as well
